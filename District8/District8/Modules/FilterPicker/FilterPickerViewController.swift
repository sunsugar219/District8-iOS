//
//  FilterPickerViewController.swift
//  District8
//
//  Created by Hodi Zsuzsa on 2021. 08. 01..
//  Copyright (c) 2021. ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class FilterPickerViewController: BasePopUpViewController {

    // MARK: - Public properties -

    var presenter: FilterPickerPresenterInterface!
    
    private var tableView: UITableView!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        removeStatusBarView()
    }
    
    private func setup() {
        initTableview()
//        initButton()
    }

    private func initTableview() {
        tableView = UITableView()
        tableView.layer.cornerRadius = 8.0.screenScaled
        tableView.layer.masksToBounds = true
        tableView.backgroundColor = .white
        tableView.allowsMultipleSelection = true
        tableView.allowsMultipleSelectionDuringEditing = true
        tableView.register(FilterListItem.self, forCellReuseIdentifier: FilterListItem.cellId)
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .none
        
        containerView.addSubview(tableView)
        tableView.snp.makeConstraints { make in
            make.leading.centerX.bottom.equalToSuperview()
            make.top.lessThanOrEqualTo(view.snp.centerY)
        }
    }
    
//    private func initButton() {
//
//
//    }
    
}

// MARK: - Extensions -

extension FilterPickerViewController: FilterPickerViewInterface {
}

extension FilterPickerViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        4
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: FilterListItem.cellId, for: indexPath) as! FilterListItem
        let text = presenter.getOption(at: indexPath)
        cell.bind(text: text)

        if indexPath.row == (self.tableView(tableView, numberOfRowsInSection: 0))-1 {
            cell.hideSeparator()
        }
        cell.selectionStyle = .none
        return cell
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = UITableViewHeaderFooterView()
        let subview = PopupHeaderView()
        subview.bind(text: "FilterTitle".localized)
        headerView.addSubview(subview)
        subview.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
            
        let tapRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleTap))
            tapRecognizer.delegate = self
            tapRecognizer.numberOfTapsRequired = 1
            tapRecognizer.numberOfTouchesRequired = 1
            headerView.addGestureRecognizer(tapRecognizer)
            return headerView
        
    }
    
    @objc
    private func handleTap() {
        transparentViewTapped()
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        let footerView = UITableViewHeaderFooterView()
        let container = UIView()
        container.backgroundColor = .white
        footerView.addSubview(container)
        container.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        let applyButton = UIButton()
        applyButton.setTitle("ApplyFilter".localized, for: .normal)
        applyButton.setTitleColor(.white, for: .normal)
        applyButton.titleLabel?.font = Fonts.Body2()
        applyButton.backgroundColor = UIColor(named: "Delft")
        applyButton.layer.cornerRadius = 8.0.screenScaled
        applyButton.layer.masksToBounds = true
        applyButton.addTarget(self, action: #selector(applyTapped), for: .touchUpInside)
        
        container.addSubview(applyButton)
        applyButton.snp.makeConstraints { make in
            make.center.top.equalToSuperview()
            make.leading.equalToSuperview().offset(16.0.screenScaled)
            make.height.equalTo(48.0.screenScaled)
        }
        return footerView
    }
    
    @objc
    private func applyTapped() {
        NotificationCenter.default.post(name: Constants.Notifications.FiltersChanged, object: nil)
        transparentViewTapped()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        var filters = UserDefaults.standard.stringArray(forKey: Constants.UserDefaults.Filters)
        let filter = presenter.getOption(at: indexPath)
        if let safeFilters = filters {
            if safeFilters.contains(filter) {
                let temp = safeFilters.filter {$0 != filter}
                filters = temp
            } else {
                filters?.append(filter)
            }
        } else {
            filters = [filter]
        }
        UserDefaults.standard.setValue(filters, forKey: Constants.UserDefaults.Filters)
        tableView.reloadData()
        
    }
}
extension FilterPickerViewController: UIGestureRecognizerDelegate {}
